{
	"info": {
		"_postman_id": "a37d04f2-2431-4395-aa88-a869c41904ff",
		"name": "QuickMoveServiceAPI",
		"description": "QuickMove offers seamless registration, booking, and ride management for both passengers and drivers. Users can quickly book rides, track their journey history, and cancel or complete rides as needed, all within a user-friendly platform. Built with robust API endpoints and secure authentication, QuickMove ensures efficient matching of drivers and passengers for a smooth, hassle-free ride experience",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "RegisterAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Define required fields for the request body",
									"let requiredFields = ['email', 'name', 'password', 'phone', 'role'];",
									"",
									"// Test to ensure that the request body contains all required fields",
									"pm.test(\"Request body contains all required fields\", function () {",
									"    let requestBody = pm.request.body ? pm.request.body.raw : null;",
									"    if (requestBody) {",
									"        let parsedBody = JSON.parse(requestBody);",
									"        requiredFields.forEach(field => {",
									"            pm.expect(parsedBody).to.include.keys(field);",
									"        });",
									"    } else {",
									"        pm.expect(requestBody).to.not.be.null; // If no body is sent, fail the test",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"email\": \"admin@pas.com\",\n    \"name\": \"Jaggu\",\n    \"password\": \"Jaggu@Admin\",\n    \"phone\": \"1122334455\",\n    \"role\": \"adm\",\n    \"organization\": {\n        \"id\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/users/register",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonResponse = pm.response.json();",
									"",
									"// Ensure the response contains the access_token",
									"pm.test(\"Response should contain access_token\", function () {",
									"    pm.expect(jsonResponse.data.access_token).to.not.be.null;",
									"});",
									"",
									"// Save the access_token as an environment variable",
									"pm.environment.set(\"accessToken\", jsonResponse.data.access_token);",
									"",
									"// Define required fields for the request body",
									"let requiredFields = ['name', 'password'];",
									"",
									"// Check if all required fields are present in the request body",
									"requiredFields.forEach(field => {",
									"    pm.test(`${field} should be present in the request body`, function () {",
									"        // Access the request body (assuming it's JSON)",
									"        let requestBody = pm.request.body ? pm.request.body.raw : null;",
									"        ",
									"        // If the request body exists, parse it as JSON and check for fields",
									"        if (requestBody) {",
									"            let parsedBody = JSON.parse(requestBody);",
									"            pm.expect(parsedBody).to.have.property(field);",
									"        } else {",
									"            pm.expect(requestBody).to.not.be.null; // If no body is sent, fail the test",
									"        }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jaggu\",\n    \"password\": \"Jaggu@Admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/users/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Ride",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to ensure that the response status is 200 OK",
									"pm.test(\"Response status is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// List of required fields (including nested fields like driver.id, passenger.email, etc.)",
									"let requiredFields = [",
									"    'status',",
									"    'driver.id',",
									"    'driver.email',",
									"    'passenger.id',",
									"    'passenger.email',",
									"    'startLocation',",
									"    'endLocation',",
									"    'startTime',",
									"    'endTime',",
									"    'cancellationReason',",
									"    'price'",
									"];",
									"",
									"// Function to check if a nested field exists",
									"function checkNestedField(obj, path) {",
									"    const fields = path.split('.');",
									"    let fieldValue = obj;",
									"",
									"    // Traverse the object using the path",
									"    for (let i = 0; i < fields.length; i++) {",
									"        if (fieldValue && fieldValue.hasOwnProperty(fields[i])) {",
									"            fieldValue = fieldValue[fields[i]];",
									"        } else {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"// Test to ensure that all required fields are present in the request body",
									"pm.test(\"Request body contains all required fields\", function () {",
									"    // Access the request body (assuming it's JSON)",
									"    let requestBody = pm.request.body ? pm.request.body.raw : null;",
									"    ",
									"    // If the request body exists, parse it as JSON",
									"    if (requestBody) {",
									"        let parsedBody = JSON.parse(requestBody);",
									"        ",
									"        // Check each required field",
									"        requiredFields.forEach(field => {",
									"            let fieldExists = checkNestedField(parsedBody, field);",
									"            ",
									"            // Assert that the field exists",
									"            pm.expect(fieldExists, `${field} should be present in the request body`).to.be.true;",
									"        });",
									"    } else {",
									"        pm.expect(requestBody).to.not.be.null; // If no body is sent, fail the test",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"COMPLETED\",\n    \"driver\": {\n        \"id\": 6,\n        \"email\": \"driver@email.com\"\n    },\n    \"passenger\": {\n        \"id\": 10,\n        \"email\": \"passenger@email.com\"\n    },\n    \"startLocation\": \"Location A\",\n    \"endLocation\": \"Location B\",\n    \"startTime\": null,\n    \"endTime\": null,\n    \"cancellationReason\": null,\n    \"price\": 100\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/api/admin/ride",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"ride"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rides",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/admin/rides",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"rides"
							],
							"query": [
								{
									"key": "status",
									"value": "",
									"description": "Ride status",
									"disabled": true
								},
								{
									"key": "driverId",
									"value": "",
									"description": "Driver ID",
									"disabled": true
								},
								{
									"key": "passengerId",
									"value": "",
									"description": "Passenger ID",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ride By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK when the ride exists\", function () {",
									"    pm.response.to.have.status(200);  // Check if status code is 200 OK",
									"    pm.response.to.have.jsonBody(\"id\");  // Verify that the response body contains the 'id' field",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/admin/ride/21",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"ride",
								"21"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Ride",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to ensure that the response status is 200 OK",
									"pm.test(\"Response status is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// List of required fields (including nested fields like driver.id, passenger.email, etc.)",
									"let requiredFields = [",
									"    'status',",
									"    'driver.id',",
									"    'driver.email',",
									"    'passenger.id',",
									"    'passenger.email',",
									"    'startLocation',",
									"    'endLocation',",
									"    'startTime',",
									"    'endTime',",
									"    'cancellationReason',",
									"    'price'",
									"];",
									"",
									"// Function to check if a nested field exists",
									"function checkNestedField(obj, path) {",
									"    const fields = path.split('.');",
									"    let fieldValue = obj;",
									"",
									"    // Traverse the object using the path",
									"    for (let i = 0; i < fields.length; i++) {",
									"        if (fieldValue && fieldValue.hasOwnProperty(fields[i])) {",
									"            fieldValue = fieldValue[fields[i]];",
									"        } else {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"// Test to ensure that all required fields are present in the request body",
									"pm.test(\"Request body contains all required fields\", function () {",
									"    // Access the request body (assuming it's JSON)",
									"    let requestBody = pm.request.body ? pm.request.body.raw : null;",
									"    ",
									"    // If the request body exists, parse it as JSON",
									"    if (requestBody) {",
									"        let parsedBody = JSON.parse(requestBody);",
									"        ",
									"        // Check each required field",
									"        requiredFields.forEach(field => {",
									"            let fieldExists = checkNestedField(parsedBody, field);",
									"            ",
									"            // Assert that the field exists",
									"            pm.expect(fieldExists, `${field} should be present in the request body`).to.be.true;",
									"        });",
									"    } else {",
									"        pm.expect(requestBody).to.not.be.null; // If no body is sent, fail the test",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"CANCELLED\",\n    \"driver\": {\n        \"id\": 6,\n        \"email\": \"driver@email.com\"\n    },\n    \"passenger\": {\n        \"id\": 10,\n        \"email\": \"passenger@email.com\"\n    },\n    \"startLocation\": \"Location A\",\n    \"endLocation\": \"Location B\",\n    \"startTime\": null,\n    \"endTime\": null,\n    \"cancellationReason\": \"Waiting time too high\",\n    \"price\": 100\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/api/admin/ride/21",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"ride",
								"21"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Ride",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK when the ride exists\", function () {",
									"    pm.response.to.have.status(200); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/admin/ride/22",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"ride",
								"22"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\", \n    \"email\": \"john.doe@example.com\", \n    \"phone\": \"1234567890\", \n    \"role\": \"driver\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/api/admin/user",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/admin/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/admin/user/15",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"user",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jane Doe\", \n    \"email\": \"jane.doe@example.com\", \n    \"phone\": \"0987654321\", \n    \"role\": \"passanger\", \n    \"password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/api/admin/user/15",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"user",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/admin/user/15",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"user",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Cost-Calc Service URL",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/admin/cost-calc-endpoint?costCalculationUrl=http://127.0.0.1:5532/cost-calculator",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"admin",
								"cost-calc-endpoint"
							],
							"query": [
								{
									"key": "costCalculationUrl",
									"value": "http://127.0.0.1:5532/cost-calculator"
								},
								{
									"key": "authToken",
									"value": "EVH9OW8EYUFG983H49V8H",
									"description": "Optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Passenger",
			"item": [
				{
					"name": "RegisterPassenger",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let requiredFields = ['email', 'name', 'password', 'phone', 'role'];",
									"pm.test(\"Request body contains all required fields\", function () {",
									"    let requestBody = pm.request.body ? pm.request.body.raw : null;",
									"    if (requestBody) {",
									"        let parsedBody = JSON.parse(requestBody);",
									"        requiredFields.forEach(field => {",
									"            pm.expect(parsedBody).to.include.keys(field);",
									"        });",
									"    } else {",
									"        pm.expect(requestBody).to.not.be.null;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"vk@email.com\",\n    \"name\": \"vk\",\n    \"password\": \"vk@1234\",\n    \"phone\": \"123489\",\n    \"role\": \"passenger\",\n    \"organization\": {\n        \"id\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/users/register",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "PassengerLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"",
									"// Ensure the response contains the access_token",
									"pm.test(\"Response should contain access_token\", function () {",
									"    pm.expect(jsonResponse.data.access_token).to.not.be.null;",
									"});",
									"",
									"// Save the access_token as an environment variable",
									"pm.environment.set(\"accessToken\", jsonResponse.data.access_token);",
									"",
									"// Define required fields for the request body",
									"let requiredFields = ['name', 'password'];",
									"",
									"// Check if all required fields are present in the request body",
									"requiredFields.forEach(field => {",
									"    pm.test(`${field} should be present in the request body`, function () {",
									"        // Access the request body (assuming it's JSON)",
									"        let requestBody = pm.request.body ? pm.request.body.raw : null;",
									"        ",
									"        // If the request body exists, parse it as JSON and check for fields",
									"        if (requestBody) {",
									"            let parsedBody = JSON.parse(requestBody);",
									"            pm.expect(parsedBody).to.have.property(field);",
									"        } else {",
									"            pm.expect(requestBody).to.not.be.null; // If no body is sent, fail the test",
									"        }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"vk\",\n    \"password\": \"vk@1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/users/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchRide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check if the response status is 200 OK",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test to check that response contains required fields",
									"pm.test(\"Response contains required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ride).to.not.be.null;",
									"    pm.expect(jsonData.ride).to.have.property('id');",
									"    pm.expect(jsonData.ride).to.have.property('startLocationLatitude');",
									"    pm.expect(jsonData.ride).to.have.property('startLocationLongitude');",
									"    pm.expect(jsonData.ride).to.have.property('endLocationLatitude');",
									"    pm.expect(jsonData.ride).to.have.property('endLocationLongitude');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/rides/search?pickupLocation=Bangalore Whitefield&dropLocation=Bangalore Electronic City",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"search"
							],
							"query": [
								{
									"key": "pickupLocation",
									"value": "Bangalore Whitefield"
								},
								{
									"key": "dropLocation",
									"value": "Bangalore Electronic City"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BookRide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check if the response status is 200 OK",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test to check that response contains required fields",
									"pm.test(\"Response contains required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ride).to.not.be.null;",
									"    pm.expect(jsonData.ride).to.have.property('id');",
									"    pm.expect(jsonData.ride).to.have.property('rideType');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/rides/book?rideId=31&vehicleTypeId=1&cost=9063.0$",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"book"
							],
							"query": [
								{
									"key": "rideId",
									"value": "31"
								},
								{
									"key": "vehicleTypeId",
									"value": "1"
								},
								{
									"key": "cost",
									"value": "9063.0$"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CancelRide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/rides/cancel?rideId=28&reason=Wrong Address selected",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"cancel"
							],
							"query": [
								{
									"key": "rideId",
									"value": "28"
								},
								{
									"key": "reason",
									"value": "Wrong Address selected"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRideHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/rides/history?userId=18",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"history"
							],
							"query": [
								{
									"key": "userId",
									"value": "18"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Driver",
			"item": [
				{
					"name": "DriverCompleteRegistration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"let requiredFields = [",
									"    'email',",
									"    'name',",
									"    'password',",
									"    'phone',",
									"    'role',",
									"    'licenseNumber',",
									"    'vehicleNumber',",
									"    'vehicleColor',",
									"    'vehicleModel',",
									"    'organization.id',",
									"    'vehicleType.id'",
									"];",
									"",
									"// Function to check if a nested field exists",
									"function checkNestedField(obj, path) {",
									"    const fields = path.split('.');",
									"    let fieldValue = obj;",
									"",
									"    // Traverse the object using the path",
									"    for (let i = 0; i < fields.length; i++) {",
									"        if (fieldValue && fieldValue.hasOwnProperty(fields[i])) {",
									"            fieldValue = fieldValue[fields[i]];",
									"        } else {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"// Test to ensure that all required fields are present in the request body",
									"pm.test(\"Request body contains all required fields\", function () {",
									"    // Access the request body (assuming it's JSON)",
									"    let requestBody = pm.request.body ? pm.request.body.raw : null;",
									"    ",
									"    // If the request body exists, parse it as JSON",
									"    if (requestBody) {",
									"        let parsedBody = JSON.parse(requestBody);",
									"        ",
									"        // Check each required field",
									"        requiredFields.forEach(field => {",
									"            let fieldExists = checkNestedField(parsedBody, field);",
									"            ",
									"            // Assert that the field exists",
									"            pm.expect(fieldExists, `${field} should be present in the request body`).to.be.true;",
									"        });",
									"    } else {",
									"        pm.expect(requestBody).to.not.be.null; // If no body is sent, fail the test",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"drivers@email.com\",\n    \"name\": \"drivers\",\n    \"password\": \"drivers@1234\",\n    \"phone\": \"43211\",\n    \"role\": \"driver\",\n    \"organization\": {\n        \"id\": 1\n    },\n    \"licenseNumber\": \"DL12345678901234\",\n    \"vehicleNumber\": \"DL12 AB 1234\",\n    \"vehicleColor\": \"White\",\n    \"vehicleModel\": \"Maruti Suzuki Swift Dzire\",\n    \"vehicleType\": {\n        \"id\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/users/register",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "DriverRegistration",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"passenger@email.com\",\n    \"name\": \"passenger1\",\n    \"password\": \"passenger@1234\",\n    \"phone\": \"1234\",\n    \"role\": \"passenger\",\n    \"organization\": {\n        \"id\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/users/register",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "DriverLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"",
									"// Ensure the response contains the access_token",
									"pm.test(\"Response should contain access_token\", function () {",
									"    pm.expect(jsonResponse.data.access_token).to.not.be.null;",
									"});",
									"",
									"// Save the access_token as an environment variable",
									"pm.environment.set(\"accessToken\", jsonResponse.data.access_token);",
									"",
									"// Define required fields for the request body",
									"let requiredFields = ['name', 'password'];",
									"",
									"// Check if all required fields are present in the request body",
									"requiredFields.forEach(field => {",
									"    pm.test(`${field} should be present in the request body`, function () {",
									"        // Access the request body (assuming it's JSON)",
									"        let requestBody = pm.request.body ? pm.request.body.raw : null;",
									"        ",
									"        // If the request body exists, parse it as JSON and check for fields",
									"        if (requestBody) {",
									"            let parsedBody = JSON.parse(requestBody);",
									"            pm.expect(parsedBody).to.have.property(field);",
									"        } else {",
									"            pm.expect(requestBody).to.not.be.null; // If no body is sent, fail the test",
									"        }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"drivers\",\n    \"password\": \"drivers@1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/users/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "DriverProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"licenseNumber\": \"DL-1420110012345\",\n    \"vehicleType\": \"CAR\",\n    \"vehicleNumber\": \"KA019999\",\n    \"vehicleModel\": \"Maruti Suzuki Swift Dzires\",\n    \"vehicleColor\": \"White\",\n    \"latitude\": -11.41020,\n    \"longitude\": 87.57929\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/driver/profile/21",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"driver",
								"profile",
								"21"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckRideRequests",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/rides/check",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "AcceptRideRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 OK when the ride is accepted\", function () {",
									"    pm.response.to.have.status(201); ",
									"});",
									"pm.test(\"Ride status should be 'ASSIGNED'\", function () {",
									"    // Parse the response JSON",
									"    const responseBody = pm.response.json();",
									"",
									"    // Check if the 'ride' object exists and has a 'status' property",
									"    pm.expect(responseBody.ride).to.have.property('status');",
									"",
									"    // Check if the 'status' property of the 'ride' is equal to 'ASSIGNED'",
									"    pm.expect(responseBody.ride.status).to.eql(\"ASSIGNED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/rides/accept?rideId=31",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"accept"
							],
							"query": [
								{
									"key": "rideId",
									"value": "31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "StartRide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ride status is ONGOING\", function () {",
									"    // Parse the response JSON",
									"    var jsonData = pm.response.json();",
									"",
									"    // Ensure that the status is \"ASSIGNED\"",
									"    pm.expect(jsonData.ride.status).to.eql(\"ONGOING\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/rides/start?rideId=30",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"start"
							],
							"query": [
								{
									"key": "rideId",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CompleteRide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ride status is COMPLETED\", function () {",
									"    // Parse the response JSON",
									"    var jsonData = pm.response.json();",
									"",
									"    // Ensure that the status is \"ASSIGNED\"",
									"    pm.expect(jsonData.ride.status).to.eql(\"COMPLETED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/rides/complete?rideId=30&latitude=10.11&longitude=20.3",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"complete"
							],
							"query": [
								{
									"key": "rideId",
									"value": "30"
								},
								{
									"key": "latitude",
									"value": "10.11"
								},
								{
									"key": "longitude",
									"value": "20.3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CancelRide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/rides/cancel?rideId=1&reason=Wrong Address selected",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"cancel"
							],
							"query": [
								{
									"key": "rideId",
									"value": "1"
								},
								{
									"key": "reason",
									"value": "Wrong Address selected"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRideHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/rides/history?userId=21",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"rides",
								"history"
							],
							"query": [
								{
									"key": "userId",
									"value": "21"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}